first 
see code in /code/adc

when i install ad_v1, then run ad_app_v1

error looks:

   ad convert opened!                  

   Unable to handle kernel NULL pointer 

   dereference at virtual address 00000000                         

   Internal error: Oops: 817

it is already known (see doc/ioremap issue)

so now my ad_app_v1 works well, though it is still too simple.

what i need to do now is to debug the driver
*********
ad_v2

i will first use '__iomem' method, so here comes ad_v2

then the same error remains, why?

i search in 2410_ts.c again, and find out i actually missed this line

   base_addr=ioremap(S3C2410_PA_ADC,0x20);
   ...
   iounmap(base_addr);

how silly!

*************
now ad_v3
            
but when i add 

 base_addr=ioremap(S3C2410_PA_ADC,0x20);

under 

  static void __iomem *base_addr;

then error during compilation

  typy defaults to 'int' in declaration in lineXXX(the ioremap line)

  conflict types

  previous declaratioin is in lineXXX(the iomem line)

when i am sure there is nothing wrong with the types,

the truble must be due to the position of the iomap line

this time i am right, when i copy the ioremap line 

into adc_open{}, the bug is gone.

and when i install it on arm, and

#./ad

haha, no error message is seen, the program runs into a dead loop.

******************
now ad_v4

the part

   do{
     tmp = readl(S3C2410_ADCCON);
    }while(!(((unsigned int)tmp)&0x8000));

is responsible for the dead loop, so i change it a lot, see more in code

and of course i write 

///////0x4f41///////////

 in to ADCCON(see WHY in doc/adc config)

there is much we can do to ADCTSC, but this time we only write a 0 to it 

haha, i see in hyperterm this:

   / # insmod  ad.ko
   s3c2410_adc driver initial
   / # ./ad
   the output data=0
   the output data=1023
   ad convert closed!

************
ad_v5

i write 0 to ADCCON

output=0 forever

*************
ad_v6

i write 1 to READ_START

output=0 forever

**************
ad_v4a

i change ad_v4 a little

change 0x4f41 in to 0x4f40

now ad is off 

then the message is 

output=0 forever

so 'output=0' means ad is not wroking

and i can safely conclude that in ad_v4

ad is working

*******************
ad_v4b_good

so let's turn back to ad_v4, there are of course many bugs here

the most obvious one is why the loop stops after only two circle

so i change the code a little and see the message in Hyperterm

/ # ./ad
the output data=0
now ADCCON=ox4f41
the output data=1023
now ADCCON=oxcf40
the output data=1023
now ADCCON=oxcf40
the output data=1023

i feel great to see ox4f41 turns into 40 in the second circle

it is just like what they see in UM

'ENABLE_START turns into 0 after startup'

'4f' --> 'cf' means ECFLAG[15] turns into 1 in the second circle

that is just why my ad_v4 stops after two circles.

now, the new question is that what makes ECFLAG[15] turns into 1??

ANSWER: when ad finish one circle of coversion, this bit is set to it

time consum xxxCLK/(PRESVAL+1)=5us


see doc/debug_ad_2 to continue
